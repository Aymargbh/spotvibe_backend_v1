# Generated by Django 5.2.4 on 2025-08-08 15:58

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TwoFactorAuth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('actif', models.BooleanField(db_index=True, default=False, help_text='Authentification 2FA activée', verbose_name='Actif')),
                ('methode', models.CharField(choices=[('SMS', 'SMS'), ('EMAIL', 'Email'), ('TOTP', "Application d'authentification")], default='SMS', help_text="Méthode d'authentification 2FA", max_length=10, verbose_name='Méthode')),
                ('secret_key_encrypted', models.CharField(blank=True, help_text='Clé secrète chiffrée pour TOTP', max_length=255, verbose_name='Clé secrète chiffrée')),
                ('codes_recuperation_encrypted', models.JSONField(blank=True, default=list, help_text='Liste de codes de récupération chiffrés', verbose_name='Codes de récupération chiffrés')),
                ('date_activation', models.DateTimeField(blank=True, help_text="Date d'activation de la 2FA", null=True, verbose_name="Date d'activation")),
                ('date_desactivation', models.DateTimeField(blank=True, help_text='Date de désactivation de la 2FA', null=True, verbose_name='Date de désactivation')),
                ('utilisateur', models.OneToOneField(help_text='Utilisateur concerné', on_delete=django.db.models.deletion.CASCADE, related_name='two_factor_auth', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Authentification à deux facteurs',
                'verbose_name_plural': 'Authentifications à deux facteurs',
                'ordering': ['utilisateur'],
            },
        ),
        migrations.CreateModel(
            name='EmailVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(db_index=True, help_text='Adresse email à vérifier', max_length=254, validators=[django.core.validators.EmailValidator()], verbose_name='Email')),
                ('code', models.CharField(help_text='Code de vérification à 6 chiffres', max_length=6, verbose_name='Code de vérification')),
                ('type_verification', models.CharField(choices=[('INSCRIPTION', 'Inscription'), ('CHANGEMENT_EMAIL', "Changement d'email"), ('REACTIVATION', 'Réactivation de compte'), ('DEBLOCAGE_COMPTE', 'Déblocage de compte')], db_index=True, default='INSCRIPTION', help_text='Type de vérification', max_length=20, verbose_name='Type de vérification')),
                ('statut', models.CharField(choices=[('EN_ATTENTE', 'En attente'), ('VERIFIE', 'Vérifié'), ('EXPIRE', 'Expiré'), ('ANNULE', 'Annulé'), ('BLOQUE', 'Bloqué')], db_index=True, default='EN_ATTENTE', help_text='Statut de la vérification', max_length=15, verbose_name='Statut')),
                ('date_creation', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Date de création du code', verbose_name='Date de création')),
                ('date_expiration', models.DateTimeField(db_index=True, help_text="Date d'expiration du code", verbose_name="Date d'expiration")),
                ('date_verification', models.DateTimeField(blank=True, help_text='Date de vérification réussie', null=True, verbose_name='Date de vérification')),
                ('tentatives', models.PositiveIntegerField(default=0, help_text='Nombre de tentatives de vérification', verbose_name='Tentatives')),
                ('max_tentatives', models.PositiveIntegerField(default=5, help_text='Nombre maximum de tentatives autorisées', verbose_name='Tentatives maximum')),
                ('adresse_ip', models.GenericIPAddressField(blank=True, help_text='Adresse IP de création', null=True, verbose_name='Adresse IP')),
                ('utilisateur', models.ForeignKey(help_text='Utilisateur concerné', on_delete=django.db.models.deletion.CASCADE, related_name='email_verifications', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': "Vérification d'email",
                'verbose_name_plural': "Vérifications d'email",
                'ordering': ['-date_creation'],
                'indexes': [models.Index(fields=['utilisateur', 'email', 'statut'], name='email_verify_user_email_status'), models.Index(fields=['code', 'statut'], name='email_verification_code_status'), models.Index(fields=['date_expiration', 'statut'], name='email_verify_expiry_status')],
            },
        ),
        migrations.CreateModel(
            name='LoginAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_tente', models.EmailField(db_index=True, help_text='Email utilisé pour la tentative', max_length=254, validators=[django.core.validators.EmailValidator()], verbose_name='Email tenté')),
                ('statut', models.CharField(choices=[('REUSSI', 'Réussi'), ('ECHEC', 'Échec'), ('BLOQUE', 'Bloqué')], db_index=True, help_text='Résultat de la tentative', max_length=10, verbose_name='Statut')),
                ('raison_echec', models.CharField(blank=True, help_text="Raison de l'échec de connexion", max_length=100, validators=[django.core.validators.MaxLengthValidator(100)], verbose_name="Raison de l'échec")),
                ('adresse_ip', models.GenericIPAddressField(db_index=True, help_text='Adresse IP de la tentative', verbose_name='Adresse IP')),
                ('user_agent', models.TextField(blank=True, help_text='User Agent du navigateur', validators=[django.core.validators.MaxLengthValidator(500)], verbose_name='User Agent')),
                ('pays', models.CharField(blank=True, db_index=True, help_text="Pays d'origine de l'IP", max_length=50, verbose_name='Pays')),
                ('ville', models.CharField(blank=True, db_index=True, help_text="Ville d'origine de l'IP", max_length=100, verbose_name='Ville')),
                ('date_tentative', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Date et heure de la tentative', verbose_name='Date de tentative')),
                ('duree_session', models.DurationField(blank=True, help_text='Durée de la session (pour les connexions réussies)', null=True, verbose_name='Durée de session')),
                ('utilisateur', models.ForeignKey(blank=True, help_text='Utilisateur concerné (si existant)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='login_attempts', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Tentative de connexion',
                'verbose_name_plural': 'Tentatives de connexion',
                'ordering': ['-date_tentative'],
                'indexes': [models.Index(fields=['adresse_ip', 'date_tentative'], name='login_attempt_ip_date'), models.Index(fields=['email_tente', 'date_tentative'], name='login_attempt_email_date'), models.Index(fields=['utilisateur', 'statut'], name='login_attempt_user_status'), models.Index(fields=['statut', 'date_tentative'], name='login_attempt_status_date')],
            },
        ),
        migrations.CreateModel(
            name='PasswordReset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(db_index=True, help_text='Token de réinitialisation', max_length=64, unique=True, verbose_name='Token')),
                ('statut', models.CharField(choices=[('ACTIF', 'Actif'), ('UTILISE', 'Utilisé'), ('EXPIRE', 'Expiré'), ('ANNULE', 'Annulé')], db_index=True, default='ACTIF', help_text='Statut du token', max_length=10, verbose_name='Statut')),
                ('date_creation', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Date de création du token', verbose_name='Date de création')),
                ('date_expiration', models.DateTimeField(db_index=True, help_text="Date d'expiration du token", verbose_name="Date d'expiration")),
                ('date_utilisation', models.DateTimeField(blank=True, help_text="Date d'utilisation du token", null=True, verbose_name="Date d'utilisation")),
                ('adresse_ip_creation', models.GenericIPAddressField(help_text='IP utilisée pour créer le token', verbose_name='IP de création')),
                ('adresse_ip_utilisation', models.GenericIPAddressField(blank=True, help_text='IP utilisée pour utiliser le token', null=True, verbose_name="IP d'utilisation")),
                ('utilisateur', models.ForeignKey(help_text='Utilisateur demandant la réinitialisation', on_delete=django.db.models.deletion.CASCADE, related_name='password_resets', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Réinitialisation de mot de passe',
                'verbose_name_plural': 'Réinitialisations de mot de passe',
                'ordering': ['-date_creation'],
                'indexes': [models.Index(fields=['utilisateur', 'statut'], name='password_reset_user_status'), models.Index(fields=['date_expiration', 'statut'], name='password_reset_expiry_status')],
            },
        ),
        migrations.CreateModel(
            name='SocialAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(choices=[('GOOGLE', 'Google'), ('FACEBOOK', 'Facebook')], db_index=True, help_text='Fournisseur du compte social', max_length=20, verbose_name='Fournisseur')),
                ('social_id', models.CharField(db_index=True, help_text='Identifiant unique chez le fournisseur', max_length=100, verbose_name='ID social')),
                ('email', models.EmailField(help_text='Email associé au compte social', max_length=254, validators=[django.core.validators.EmailValidator()], verbose_name='Email')),
                ('nom_complet', models.CharField(blank=True, help_text='Nom complet récupéré du compte social', max_length=200, validators=[django.core.validators.MaxLengthValidator(200)], verbose_name='Nom complet')),
                ('photo_url', models.URLField(blank=True, help_text='URL de la photo de profil', validators=[django.core.validators.MaxLengthValidator(500)], verbose_name='URL de la photo')),
                ('access_token_encrypted', models.TextField(blank=True, help_text="Token d'accès chiffré pour l'API du fournisseur", verbose_name="Token d'accès chiffré")),
                ('refresh_token_encrypted', models.TextField(blank=True, help_text='Token de rafraîchissement chiffré', verbose_name='Token de rafraîchissement chiffré')),
                ('token_expires_at', models.DateTimeField(blank=True, help_text="Date d'expiration du token d'accès", null=True, verbose_name='Expiration du token')),
                ('date_creation', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Date de liaison du compte', verbose_name='Date de création')),
                ('date_modification', models.DateTimeField(auto_now=True, help_text='Date de dernière modification', verbose_name='Date de modification')),
                ('derniere_utilisation', models.DateTimeField(blank=True, db_index=True, help_text='Dernière utilisation pour la connexion', null=True, verbose_name='Dernière utilisation')),
                ('actif', models.BooleanField(db_index=True, default=True, help_text='Compte social actif', verbose_name='Actif')),
                ('utilisateur', models.ForeignKey(help_text='Utilisateur propriétaire du compte social', on_delete=django.db.models.deletion.CASCADE, related_name='social_accounts', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Compte social',
                'verbose_name_plural': 'Comptes sociaux',
                'ordering': ['-date_creation'],
                'indexes': [models.Index(fields=['utilisateur', 'provider'], name='social_account_user_provider'), models.Index(fields=['actif', 'token_expires_at'], name='social_account_active_expiry')],
                'unique_together': {('provider', 'social_id')},
            },
        ),
    ]
