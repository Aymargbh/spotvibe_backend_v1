# Generated by Django 5.2.4 on 2025-08-02 10:55

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('telephone', models.CharField(help_text='Numéro de téléphone au format béninois (+229XXXXXXXX)', max_length=13, unique=True, validators=[django.core.validators.RegexValidator(message="Le numéro de téléphone doit être au format: '+229XXXXXXXX'.", regex='^\\+229[0-9]{8}$')], verbose_name='Téléphone')),
                ('date_naissance', models.DateField(blank=True, help_text="Date de naissance de l'utilisateur", null=True, verbose_name='Date de naissance')),
                ('photo_profil', models.ImageField(blank=True, help_text="Photo de profil de l'utilisateur (max 5MB)", null=True, upload_to='profiles/', verbose_name='Photo de profil')),
                ('bio', models.TextField(blank=True, help_text="Description courte de l'utilisateur", max_length=500, verbose_name='Biographie')),
                ('est_verifie', models.BooleanField(default=False, help_text="Indique si l'utilisateur a vérifié son identité", verbose_name='Compte vérifié')),
                ('date_verification', models.DateTimeField(blank=True, help_text='Date à laquelle le compte a été vérifié', null=True, verbose_name='Date de vérification')),
                ('notifications_email', models.BooleanField(default=True, help_text='Recevoir les notifications par email', verbose_name='Notifications par email')),
                ('notifications_push', models.BooleanField(default=True, help_text='Recevoir les notifications push', verbose_name='Notifications push')),
                ('date_creation', models.DateTimeField(auto_now_add=True, help_text='Date de création du compte', verbose_name='Date de création')),
                ('date_modification', models.DateTimeField(auto_now=True, help_text='Date de dernière modification du profil', verbose_name='Date de modification')),
                ('derniere_connexion_ip', models.GenericIPAddressField(blank=True, help_text='Adresse IP de la dernière connexion', null=True, verbose_name='Dernière IP de connexion')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'ordering': ['-date_creation'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_identite', models.FileField(help_text="Carte d'identité, passeport ou autre document officiel", upload_to='verifications/', verbose_name="Document d'identité")),
                ('document_selfie', models.ImageField(blank=True, help_text="Photo de l'utilisateur tenant son document d'identité", null=True, upload_to='verifications/', verbose_name='Selfie avec document')),
                ('statut', models.CharField(choices=[('EN_ATTENTE', 'En attente'), ('APPROUVE', 'Approuvé'), ('REJETE', 'Rejeté'), ('EXPIRE', 'Expiré')], default='EN_ATTENTE', help_text='Statut de la vérification', max_length=20, verbose_name='Statut')),
                ('date_soumission', models.DateTimeField(auto_now_add=True, help_text='Date de soumission des documents', verbose_name='Date de soumission')),
                ('date_validation', models.DateTimeField(blank=True, help_text='Date de validation par un administrateur', null=True, verbose_name='Date de validation')),
                ('commentaire_admin', models.TextField(blank=True, help_text="Commentaire de l'administrateur sur la vérification", verbose_name='Commentaire administrateur')),
                ('utilisateur', models.OneToOneField(help_text='Utilisateur concerné par la vérification', on_delete=django.db.models.deletion.CASCADE, related_name='verification', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
                ('validateur', models.ForeignKey(blank=True, help_text='Administrateur qui a validé la vérification', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verifications_validees', to=settings.AUTH_USER_MODEL, verbose_name='Validateur')),
            ],
            options={
                'verbose_name': 'Vérification utilisateur',
                'verbose_name_plural': 'Vérifications utilisateur',
                'ordering': ['-date_soumission'],
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_suivi', models.DateTimeField(auto_now_add=True, help_text='Date à laquelle le suivi a commencé', verbose_name='Date de suivi')),
                ('notifications_activees', models.BooleanField(default=True, help_text='Recevoir des notifications pour les activités de cet utilisateur', verbose_name='Notifications activées')),
                ('follower', models.ForeignKey(help_text='Utilisateur qui suit', on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL, verbose_name='Suiveur')),
                ('following', models.ForeignKey(help_text='Utilisateur suivi', on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL, verbose_name='Suivi')),
            ],
            options={
                'verbose_name': 'Suivi',
                'verbose_name_plural': 'Suivis',
                'ordering': ['-date_suivi'],
                'unique_together': {('follower', 'following')},
            },
        ),
    ]
