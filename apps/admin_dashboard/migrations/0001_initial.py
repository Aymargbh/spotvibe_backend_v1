# Generated by Django 5.2.4 on 2025-08-08 15:59

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AdminAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('APPROVE_EVENT', 'Approuver un événement'), ('REJECT_EVENT', 'Rejeter un événement'), ('APPROVE_USER', 'Approuver un utilisateur'), ('REJECT_USER', 'Rejeter un utilisateur'), ('SUSPEND_USER', 'Suspendre un utilisateur'), ('ACTIVATE_USER', 'Activer un utilisateur'), ('PROCESS_REFUND', 'Traiter un remboursement'), ('SEND_NOTIFICATION', 'Envoyer une notification'), ('UPDATE_SETTINGS', 'Modifier les paramètres'), ('EXPORT_DATA', 'Exporter des données'), ('DELETE_CONTENT', 'Supprimer du contenu'), ('MODERATE_CONTENT', 'Modérer du contenu')], db_index=True, help_text="Type d'action effectuée", max_length=30, verbose_name='Action')),
                ('description', models.TextField(help_text="Description détaillée de l'action", validators=[django.core.validators.MaxLengthValidator(2000)], verbose_name='Description')),
                ('object_id', models.PositiveIntegerField(blank=True, help_text="ID de l'objet concerné", null=True)),
                ('date_action', models.DateTimeField(auto_now_add=True, db_index=True, help_text="Date et heure de l'action", verbose_name="Date de l'action")),
                ('adresse_ip', models.GenericIPAddressField(blank=True, db_index=True, help_text="Adresse IP de l'administrateur", null=True, verbose_name='Adresse IP')),
                ('user_agent', models.TextField(blank=True, help_text='User Agent du navigateur utilisé', validators=[django.core.validators.MaxLengthValidator(500)], verbose_name='User Agent')),
                ('session_key', models.CharField(blank=True, db_index=True, help_text='Clé de session pour traçabilité', max_length=40, verbose_name='Clé de session')),
                ('donnees_supplementaires', models.JSONField(blank=True, default=dict, help_text="Données supplémentaires sur l'action", verbose_name='Données supplémentaires')),
                ('validation_requise', models.BooleanField(default=False, help_text='Action nécessitant une validation supplémentaire', verbose_name='Validation requise')),
                ('date_validation', models.DateTimeField(blank=True, help_text="Date de validation de l'action", null=True, verbose_name='Date de validation')),
                ('admin', models.ForeignKey(help_text="Administrateur qui a effectué l'action", on_delete=django.db.models.deletion.CASCADE, related_name='admin_actions', to=settings.AUTH_USER_MODEL, verbose_name='Administrateur')),
                ('content_type', models.ForeignKey(blank=True, help_text="Type d'objet concerné", null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('validee_par', models.ForeignKey(blank=True, help_text="Administrateur qui a validé l'action", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='actions_validees', to=settings.AUTH_USER_MODEL, verbose_name='Validée par')),
            ],
            options={
                'verbose_name': 'Action administrateur',
                'verbose_name_plural': 'Actions administrateur',
                'ordering': ['-date_action'],
                'indexes': [models.Index(fields=['admin', 'date_action'], name='admin_action_admin_date'), models.Index(fields=['action', 'date_action'], name='admin_action_type_date'), models.Index(fields=['adresse_ip', 'date_action'], name='admin_action_ip_date'), models.Index(fields=['validation_requise', 'date_action'], name='admin_action_validation'), models.Index(fields=['content_type', 'object_id'], name='admin_action_content')],
            },
        ),
        migrations.CreateModel(
            name='AdminNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_notification', models.CharField(choices=[('VALIDATION_REQUIRED', 'Validation requise'), ('SYSTEM_ALERT', 'Alerte système'), ('SECURITY_ALERT', 'Alerte sécurité'), ('PAYMENT_ISSUE', 'Problème de paiement'), ('USER_REPORT', 'Signalement utilisateur'), ('TECHNICAL_ISSUE', 'Problème technique'), ('MAINTENANCE', 'Maintenance'), ('PERFORMANCE_ALERT', 'Alerte performance')], db_index=True, help_text='Type de notification', max_length=30, verbose_name='Type')),
                ('titre', models.CharField(help_text='Titre de la notification', max_length=200, verbose_name='Titre')),
                ('message', models.TextField(help_text='Contenu de la notification', validators=[django.core.validators.MaxLengthValidator(5000)], verbose_name='Message')),
                ('priorite', models.CharField(choices=[('BASSE', 'Basse'), ('NORMALE', 'Normale'), ('HAUTE', 'Haute'), ('CRITIQUE', 'Critique'), ('URGENTE', 'Urgente')], db_index=True, default='NORMALE', help_text='Priorité de la notification', max_length=10, verbose_name='Priorité')),
                ('statut', models.CharField(choices=[('NOUVEAU', 'Nouveau'), ('VU', 'Vu'), ('EN_COURS', 'En cours'), ('RESOLU', 'Résolu'), ('IGNORE', 'Ignoré'), ('ARCHIVE', 'Archivé')], db_index=True, default='NOUVEAU', help_text='Statut de la notification', max_length=15, verbose_name='Statut')),
                ('escalade_apres', models.DurationField(blank=True, help_text='Durée après laquelle escalader la priorité', null=True, verbose_name='Escalade après')),
                ('escalade_effectuee', models.BooleanField(default=False, help_text="Indique si l'escalade a été effectuée", verbose_name='Escalade effectuée')),
                ('object_id', models.PositiveIntegerField(blank=True, help_text="ID de l'objet concerné", null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Date de création de la notification', verbose_name='Date de création')),
                ('date_premiere_vue', models.DateTimeField(blank=True, help_text='Date de première consultation', null=True, verbose_name='Date de première vue')),
                ('date_resolution', models.DateTimeField(blank=True, help_text='Date de résolution de la notification', null=True, verbose_name='Date de résolution')),
                ('date_archivage', models.DateTimeField(blank=True, help_text="Date d'archivage automatique", null=True, verbose_name="Date d'archivage")),
                ('temps_resolution', models.DurationField(blank=True, help_text='Temps écoulé entre création et résolution', null=True, verbose_name='Temps de résolution')),
                ('nombre_vues', models.PositiveIntegerField(default=0, help_text='Nombre de fois que la notification a été vue', verbose_name='Nombre de vues')),
                ('lien_action', models.URLField(blank=True, help_text="Lien vers l'action à effectuer", verbose_name="Lien d'action")),
                ('donnees_supplementaires', models.JSONField(blank=True, default=dict, help_text='Données supplémentaires', verbose_name='Données supplémentaires')),
                ('assignee', models.ForeignKey(blank=True, help_text='Administrateur assigné à cette notification', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notifications_assignees', to=settings.AUTH_USER_MODEL, verbose_name='Assigné à')),
                ('content_type', models.ForeignKey(blank=True, help_text="Type d'objet concerné", null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('destinataires', models.ManyToManyField(help_text='Administrateurs destinataires', related_name='admin_notifications', to=settings.AUTH_USER_MODEL, verbose_name='Destinataires')),
            ],
            options={
                'verbose_name': 'Notification administrateur',
                'verbose_name_plural': 'Notifications administrateur',
                'ordering': ['-priorite', '-date_creation'],
                'indexes': [models.Index(fields=['type_notification', 'statut'], name='notif_type_status'), models.Index(fields=['priorite', 'date_creation'], name='notif_priority_date'), models.Index(fields=['statut', 'date_creation'], name='notif_status_date'), models.Index(fields=['assignee', 'statut'], name='notif_assignee_status'), models.Index(fields=['escalade_effectuee', 'date_creation'], name='notif_escalade')],
            },
        ),
        migrations.CreateModel(
            name='DashboardWidget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(db_index=True, help_text='Nom du widget', max_length=100, verbose_name='Nom')),
                ('type_widget', models.CharField(choices=[('STATS', 'Statistiques'), ('CHART', 'Graphique'), ('LIST', 'Liste'), ('COUNTER', 'Compteur'), ('PROGRESS', 'Barre de progression'), ('ALERT', 'Alerte')], db_index=True, help_text='Type de widget', max_length=20, verbose_name='Type de widget')),
                ('titre', models.CharField(help_text='Titre affiché sur le widget', max_length=200, verbose_name='Titre')),
                ('description', models.TextField(blank=True, help_text='Description du widget', validators=[django.core.validators.MaxLengthValidator(1000)], verbose_name='Description')),
                ('configuration', models.JSONField(default=dict, help_text='Configuration JSON du widget', verbose_name='Configuration')),
                ('requete_sql', models.TextField(blank=True, help_text='Requête SQL pour récupérer les données (lecture seule)', validators=[django.core.validators.MaxLengthValidator(5000)], verbose_name='Requête SQL')),
                ('cache_duration', models.PositiveIntegerField(default=300, help_text='Durée de cache des résultats en secondes', verbose_name='Durée de cache')),
                ('derniere_execution', models.DateTimeField(blank=True, help_text='Dernière exécution de la requête', null=True, verbose_name='Dernière exécution')),
                ('resultats_cache', models.JSONField(blank=True, default=dict, help_text='Résultats mis en cache', verbose_name='Résultats en cache')),
                ('largeur', models.PositiveIntegerField(default=6, help_text='Largeur du widget (1-12 colonnes Bootstrap)', verbose_name='Largeur')),
                ('hauteur', models.PositiveIntegerField(default=300, help_text='Hauteur du widget en pixels', verbose_name='Hauteur')),
                ('ordre', models.PositiveIntegerField(db_index=True, default=0, help_text="Ordre d'affichage sur le dashboard", verbose_name="Ordre d'affichage")),
                ('actif', models.BooleanField(db_index=True, default=True, help_text='Widget actif et visible', verbose_name='Actif')),
                ('date_creation', models.DateTimeField(auto_now_add=True, help_text='Date de création du widget', verbose_name='Date de création')),
                ('date_modification', models.DateTimeField(auto_now=True, help_text='Date de dernière modification', verbose_name='Date de modification')),
                ('createur', models.ForeignKey(help_text='Utilisateur qui a créé ce widget', on_delete=django.db.models.deletion.CASCADE, related_name='widgets_created', to=settings.AUTH_USER_MODEL, verbose_name='Créateur')),
                ('groupes_autorises', models.ManyToManyField(blank=True, help_text="Groupes d'utilisateurs autorisés", related_name='dashboard_widgets', to='auth.group', verbose_name='Groupes autorisés')),
                ('visible_pour', models.ManyToManyField(blank=True, help_text='Utilisateurs pouvant voir ce widget', related_name='dashboard_widgets', to=settings.AUTH_USER_MODEL, verbose_name='Visible pour')),
            ],
            options={
                'verbose_name': 'Widget de dashboard',
                'verbose_name_plural': 'Widgets de dashboard',
                'ordering': ['ordre', 'nom'],
                'indexes': [models.Index(fields=['actif', 'ordre'], name='widget_active_order'), models.Index(fields=['type_widget', 'actif'], name='widget_type_active'), models.Index(fields=['createur', 'date_creation'], name='widget_creator_date')],
            },
        ),
    ]
